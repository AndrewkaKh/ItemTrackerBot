from datetime import datetime
import os
import sys

from sqlalchemy.sql import text
from telegram import Update
from telegram.ext import CommandHandler, CallbackContext
import pandas as pd

from bot.access_control.auth_decorator import require_auth
from bot.config import ADMIN_ID, REPORT_FOLDER
from database.db import SessionLocal
from database.models import Movement, Stock
from reports.excel_generator import generate_excel, generate_excel_for_movement



sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))



def fetch_as_dicts(result):
    """ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π """
    keys = result.keys()
    return [dict(zip(keys, row)) for row in result.fetchall()]

@require_auth
async def start(update: Update, context: CallbackContext):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start.
    """
    db = SessionLocal()
    greeting = f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üëã\n"
    greeting += "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º.\n"
    greeting += "–£–∑–Ω–∞–π—Ç–µ –æ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥–∞—Ö, —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /help.\n"
    user_id = update.effective_user.id
    is_admin = str(user_id) == ADMIN_ID
    greeting += "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø–æ—ç—Ç–æ–º—É –≤–Ω–µ—Å–∏—Ç–µ —Å–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã —Ç–æ–∂–µ –º–æ–≥–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ —Å–∫–ª–∞–¥–æ–º (–ø—Ä–∏ –ø–æ–º–æ—â–∏ /add_user)" if is_admin else ""
    await update.message.reply_text(greeting)

@require_auth
async def help_(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    is_admin = str(user_id) == ADMIN_ID
    common_commands = """
üìä –ö–æ–º–∞–Ω–¥—ã –æ—Ç—á–µ—Ç–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º):
- /export_reports - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –∏ –¥–≤–∏–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (Excel).
- /filter <–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞> <–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞> - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
- /watch_stock <–ê—Ä—Ç–∏–∫—É–ª> - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤—ã–≤–µ–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º).
    """

    user_commands = """
üíº –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
- /add_item <–ê—Ä—Ç–∏–∫—É–ª>; <–ù–∞–∑–≤–∞–Ω–∏–µ>; <–°—Ç–æ–∏–º–æ—Å—Ç—å>; <–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π> - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç.
- /ot <–ê—Ä—Ç–∏–∫—É–ª>; <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>[; –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π] - –û—Ç–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å–æ —Å–∫–ª–∞–¥–∞.
- /po <–ê—Ä—Ç–∏–∫—É–ª>; <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>[; –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π] - –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥.
- /add_product <–ù–∞–∑–≤–∞–Ω–∏–µ>; <–ê—Ä—Ç–∏–∫—É–ª>; <–°–æ—Å—Ç–∞–≤> - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∏ –µ–≥–æ —Å–æ—Å—Ç–∞–≤.
- /del_article <–ê—Ä—Ç–∏–∫—É–ª> - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç –∏–ª–∏ —Ç–æ–≤–∞—Ä.
- /pr <–ê—Ä—Ç–∏–∫—É–ª>; <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞(–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤ –≤ —Ç–æ–≤–∞—Ä).
    """

    admin_commands = """
üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
- /add_user <username>; <–ò–º—è>; <–§–∞–º–∏–ª–∏—è> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- /pay_user <username> <—Å—É–º–º–∞> - –í—ã–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
- /reset_db - –°–±—Ä–æ—Å–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë.
- /load_semifinished - –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞.
- /load_products - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ –∏—Ö —Å–æ—Å—Ç–∞–≤ –∏–∑ —Ñ–∞–π–ª–∞.
- /load_history - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∫–ª–∞–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞.
    """

    if is_admin:
        greeting = common_commands + user_commands + admin_commands
    else:
        greeting = common_commands + user_commands

    await update.message.reply_text(greeting)

@require_auth
async def export_reports(update: Update, context: CallbackContext):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ (–æ—Å—Ç–∞—Ç–∫–∏, –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã –∏ —Ç–æ–≤–∞—Ä—ã) –≤ Excel.
    """
    try:
        db = SessionLocal()

        stock_query = text("""
            SELECT 
                article AS –ê—Ä—Ç–∏–∫—É–ª, 
                name AS –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, 
                in_stock AS –û—Å—Ç–∞—Ç–æ–∫, 
                cost AS –°—Ç–æ–∏–º–æ—Å—Ç—å
            FROM stock
        """)
        stock_data = fetch_as_dicts(db.execute(stock_query))

        movement_query = text("""
            SELECT 
                date AS –î–∞—Ç–∞, 
                name AS –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, 
                incoming AS –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, 
                outgoing AS –û—Ç–≥—Ä—É–∑–∫–∞, 
                comment AS –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            FROM movements
        """)
        movement_data = fetch_as_dicts(db.execute(movement_query))

        stock_pay_user_query = text("""
            SELECT
                username AS –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
                role AS –†–æ–ª—å,
                expenses AS "–û—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤"
            FROM users
        """)
        stock_pay_user_data = fetch_as_dicts(db.execute(stock_pay_user_query))

        semi_finished_products_query = text("""
            SELECT
                article AS –ê—Ä—Ç–∏–∫—É–ª,
                name AS –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ,
                cost AS –°—Ç–æ–∏–º–æ—Å—Ç—å,
                responsible AS –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π,
                comment AS –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            FROM semi_finished_products
        """)
        semi_finished_products = fetch_as_dicts(db.execute(semi_finished_products_query))

        products_query = text("""
            SELECT 
                pc.product_article AS –ê—Ä—Ç–∏–∫—É–ª,
                pc.product_name AS –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ,
                STRING_AGG(pcomp.semi_product_article || ' (' || pcomp.quantity || ')', ', ') AS –°–æ—Å—Ç–∞–≤
            FROM product_composition pc
            LEFT JOIN product_component pcomp ON pc.product_article = pcomp.product_article
            GROUP BY pc.product_article, pc.product_name
        """)
        products = fetch_as_dicts(db.execute(products_query))

        report_file = generate_excel(stock_data, movement_data, stock_pay_user_data, semi_finished_products, products)

        with open(report_file, "rb") as f:
            await update.message.reply_document(f)

        db.close()
        await update.message.reply_text("–û—Ç—á–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}")


@require_auth
async def filter_data(update: Update, context: CallbackContext):
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥—É –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.
    –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: /filter 2023-01-01 2023-12-31
    """
    try:
        args = context.args
        if len(args) != 2:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: /filter 2023-01-01 2023-12-31")
            return

        start_date = datetime.strptime(args[0], "%Y-%m-%d")
        end_date = datetime.strptime(args[1], "%Y-%m-%d")

        db = SessionLocal()

        query = db.query(Movement).filter(Movement.date.between(start_date, end_date))
        movements = query.all()

        if not movements:
            await update.message.reply_text("–î–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        data = [{
            "–î–∞—Ç–∞": movement.date.strftime("%Y-%m-%d %H:%M:%S"),
            "–ê—Ä—Ç–∏–∫—É–ª": movement.article,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": movement.name,
            "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ": movement.incoming,
            "–û—Ç–≥—Ä—É–∑–∫–∞": movement.outgoing,
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": movement.comment
        } for movement in movements]

        df = pd.DataFrame(data)
        file = generate_excel_for_movement(df)
        with open(file, "rb") as f:
            await update.message.reply_document(f)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@require_auth
async def watch_stock(update: Update, context: CallbackContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ.
    –ü—Ä–∏–º–µ—Ä: /watch_stock <–∞—Ä—Ç–∏–∫—É–ª>
    –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –≤—ã–≤–æ–¥—è—Ç—Å—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ.
    """
    try:
        args = context.args
        db = SessionLocal()

        if len(args) == 0:
            stock_entries = db.query(Stock).all()
            if not stock_entries:
                await update.message.reply_text("–°–∫–ª–∞–¥ –ø—É—Å—Ç.")
            else:
                message = "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n"
                flag_print_text = False
                for entry in stock_entries:
                    if "ST" in entry.article:
                        message += f"üîπ {entry.article} ‚Äî {entry.name}: {entry.in_stock} —à—Ç.\n"
                        flag_print_text = True
                if not flag_print_text:
                    await update.message.reply_text("–¢–æ–≤–∞—Ä–æ–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º '*ST*' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                else:
                    await update.message.reply_text(message)
        elif len(args) == 1:
            article = args[0].strip()
            stock_entry = db.query(Stock).filter_by(article=article).first()
            if stock_entry:
                await update.message.reply_text(
                    f"–ê—Ä—Ç–∏–∫—É–ª: '{article}' —Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: {stock_entry.in_stock}"
                )
            else:
                await update.message.reply_text(
                    f"–ê—Ä—Ç–∏–∫—É–ª–∞: '{article}' –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ"
                )
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n–§–æ—Ä–º–∞—Ç: /watch_stock <–∞—Ä—Ç–∏–∫—É–ª>\n–ü—Ä–∏–º–µ—Ä: /watch_stock FS_ST005")
        db.close()
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç—á–µ—Ç–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–∞: {str(e)}")

async def unknown_command(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é / –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É.
    """
    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )